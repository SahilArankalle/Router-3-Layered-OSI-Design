vendor_name = ModelSim
source_file = 1, C:/Users/Sahil/Desktop/Maven/Project/Functional Bloacks of Router/Register/router_register.v
design_name = router_register
instance = comp, \clk~I , clk, router_register, 1
instance = comp, \detect_addr~I , detect_addr, router_register, 1
instance = comp, \ld_state~I , ld_state, router_register, 1
instance = comp, \pkt_valid~I , pkt_valid, router_register, 1
instance = comp, \fifo_full~I , fifo_full, router_register, 1
instance = comp, \always6~0 , always6~0, router_register, 1
instance = comp, \laf_state~I , laf_state, router_register, 1
instance = comp, \resetn~I , resetn, router_register, 1
instance = comp, \low_pkt_valid~reg0 , low_pkt_valid~reg0, router_register, 1
instance = comp, \always6~1 , always6~1, router_register, 1
instance = comp, \parity_done~reg0 , parity_done~reg0, router_register, 1
instance = comp, \data_in[3]~I , data_in[3], router_register, 1
instance = comp, \packet_parity[4]~1 , packet_parity[4]~1, router_register, 1
instance = comp, \packet_parity[3] , packet_parity[3], router_register, 1
instance = comp, \lfd_state~I , lfd_state, router_register, 1
instance = comp, \data_in[2]~I , data_in[2], router_register, 1
instance = comp, \fifo_full_state_byte[0]~1 , fifo_full_state_byte[0]~1, router_register, 1
instance = comp, \fifo_full_state_byte[2] , fifo_full_state_byte[2], router_register, 1
instance = comp, \data_in[1]~I , data_in[1], router_register, 1
instance = comp, \data_in[0]~I , data_in[0], router_register, 1
instance = comp, \header_byte[2]~0 , header_byte[2]~0, router_register, 1
instance = comp, \header_byte[2]~1 , header_byte[2]~1, router_register, 1
instance = comp, \header_byte[2] , header_byte[2], router_register, 1
instance = comp, \internal_parity[7]~2 , internal_parity[7]~2, router_register, 1
instance = comp, \internal_parity[2] , internal_parity[2], router_register, 1
instance = comp, \fifo_full_state_byte[3] , fifo_full_state_byte[3], router_register, 1
instance = comp, \header_byte[3] , header_byte[3], router_register, 1
instance = comp, \internal_parity[3] , internal_parity[3], router_register, 1
instance = comp, \packet_parity[2] , packet_parity[2], router_register, 1
instance = comp, \Equal1~1 , Equal1~1, router_register, 1
instance = comp, \data_in[5]~I , data_in[5], router_register, 1
instance = comp, \packet_parity[5] , packet_parity[5], router_register, 1
instance = comp, \data_in[4]~I , data_in[4], router_register, 1
instance = comp, \fifo_full_state_byte[4] , fifo_full_state_byte[4], router_register, 1
instance = comp, \header_byte[4] , header_byte[4], router_register, 1
instance = comp, \internal_parity[4] , internal_parity[4], router_register, 1
instance = comp, \fifo_full_state_byte[5] , fifo_full_state_byte[5], router_register, 1
instance = comp, \header_byte[5] , header_byte[5], router_register, 1
instance = comp, \internal_parity[5] , internal_parity[5], router_register, 1
instance = comp, \packet_parity[4] , packet_parity[4], router_register, 1
instance = comp, \Equal1~2 , Equal1~2, router_register, 1
instance = comp, \data_in[6]~I , data_in[6], router_register, 1
instance = comp, \fifo_full_state_byte[6] , fifo_full_state_byte[6], router_register, 1
instance = comp, \header_byte[6] , header_byte[6], router_register, 1
instance = comp, \internal_parity[6] , internal_parity[6], router_register, 1
instance = comp, \data_in[7]~I , data_in[7], router_register, 1
instance = comp, \packet_parity[7] , packet_parity[7], router_register, 1
instance = comp, \packet_parity[6] , packet_parity[6], router_register, 1
instance = comp, \fifo_full_state_byte[7] , fifo_full_state_byte[7], router_register, 1
instance = comp, \header_byte[7] , header_byte[7], router_register, 1
instance = comp, \internal_parity[7] , internal_parity[7], router_register, 1
instance = comp, \Equal1~3 , Equal1~3, router_register, 1
instance = comp, \fifo_full_state_byte[0] , fifo_full_state_byte[0], router_register, 1
instance = comp, \header_byte[0] , header_byte[0], router_register, 1
instance = comp, \internal_parity[0] , internal_parity[0], router_register, 1
instance = comp, \packet_parity[0] , packet_parity[0], router_register, 1
instance = comp, \fifo_full_state_byte[1] , fifo_full_state_byte[1], router_register, 1
instance = comp, \header_byte[1] , header_byte[1], router_register, 1
instance = comp, \internal_parity[1] , internal_parity[1], router_register, 1
instance = comp, \packet_parity[1] , packet_parity[1], router_register, 1
instance = comp, \Equal1~0 , Equal1~0, router_register, 1
instance = comp, \Equal1~4 , Equal1~4, router_register, 1
instance = comp, \err~reg0 , err~reg0, router_register, 1
instance = comp, \always6~2 , always6~2, router_register, 1
instance = comp, \data_out[6]~0 , data_out[6]~0, router_register, 1
instance = comp, \data_out[0]~reg0 , data_out[0]~reg0, router_register, 1
instance = comp, \data_out[1]~reg0 , data_out[1]~reg0, router_register, 1
instance = comp, \data_out[2]~reg0 , data_out[2]~reg0, router_register, 1
instance = comp, \data_out[3]~reg0 , data_out[3]~reg0, router_register, 1
instance = comp, \data_out[4]~reg0 , data_out[4]~reg0, router_register, 1
instance = comp, \data_out[5]~reg0 , data_out[5]~reg0, router_register, 1
instance = comp, \data_out[6]~reg0 , data_out[6]~reg0, router_register, 1
instance = comp, \data_out[7]~reg0 , data_out[7]~reg0, router_register, 1
instance = comp, \reset_int_reg~I , reset_int_reg, router_register, 1
instance = comp, \full_state~I , full_state, router_register, 1
instance = comp, \parity_done~I , parity_done, router_register, 1
instance = comp, \low_pkt_valid~I , low_pkt_valid, router_register, 1
instance = comp, \err~I , err, router_register, 1
instance = comp, \data_out[0]~I , data_out[0], router_register, 1
instance = comp, \data_out[1]~I , data_out[1], router_register, 1
instance = comp, \data_out[2]~I , data_out[2], router_register, 1
instance = comp, \data_out[3]~I , data_out[3], router_register, 1
instance = comp, \data_out[4]~I , data_out[4], router_register, 1
instance = comp, \data_out[5]~I , data_out[5], router_register, 1
instance = comp, \data_out[6]~I , data_out[6], router_register, 1
instance = comp, \data_out[7]~I , data_out[7], router_register, 1
