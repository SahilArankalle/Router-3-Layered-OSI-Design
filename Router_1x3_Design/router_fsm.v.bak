module router_fsm (
input clk,
input resetn,
input pkt_valid,
input paritu_done,
input [1:0] data_in,
input soft_reset_0,
input soft_reset_1,
input soft_reset_2,
input fifo_full,
input low_pkt_valid,
input fifo_empty_0,
input fifo_empty_1,
input fifo_empty_2,
output reg busy,
output reg detect_addr,
output reg ld_state,
output reg laf_state,
output reg full_stage,
output reg write_enb_reg,
output reg rst_int_reg,
output reg lfd_state 
);


parameter = DECODE_ADDRESS = 3'b000,
				LOAD_FIRST_DATA = 3'b001,
				WAIT_TILL_EMPTY = 3'b010,
				LOAD_DATA = 3'b011,
				LOAD_PARITY = 3'b100,
				FIFO_FULL_STATE = 3'b101,
				LOAD_AFTER_FULL = 3'b110,
				CHECK_PARITY_ERROR = 3'b111;
				
reg [2:0] present_state;
reg [2:0] next_state;


//reset logic

always @ (posedge clk)
begin
if(!resetn)
present_state <= DECODE_ADDRESS;
else if (soft_reset_0 || soft_reset_1 || soft_reset_2)
present_State <= DECODE_ADDRESS;
else
present_state <= next_state;
end


always @ (*)
begin
next_state <= DECODE_ADDRESS;
case (present_state)

DECODE_ADDRESS : 
begin

if ((pkt_valid & (data_in[1:0] == 0) && fifo_empty_0) ||
	 (pkt_valid & (data_in[1:0] == 1) && fifo_empty_1) ||
	 (pkt_valid & (data_in[1:0] == 2) && fifo_empty_2) )
	 next_state <= LOAD_FIRST_DATA;
	 
	 
else if ((pkt_valid & (data_in[1:0] == 0) && !fifo_empty_0) ||
			(pkt_valid & (data_in[1:0] == 1) && !fifo_empty_1) ||
			(pkt_valid & (data_in[1:0] == 2) && !fifo_empty_2) )
			
			next_state <= WAIT_TILL_EMPTY;

else
next_state <= DECODER_ADDRESS;
			
end

LOAD_FIRST_DATA :
next_state <= LOAD_DATA;

WAIT_TILL_EMPTY :
begin
if (fifo_empty_0 || fifo_empty_1 || fifo_empty_2)
next_state <= LOAD_FIRST_DATA;

else
next_state <= WAIT_TILL_EMPTY;
end


LOAD_DATA :
begin

if (fifo_full)
next_state <= FIFO_FULL_STATE;

else if ()
end
				
				