module router_fsm_tb();
    reg clk,
    reg resetn,
    reg pkt_valid,
    reg parity_done,
    reg [1:0] data_in,
    reg soft_reset_0,
    reg soft_reset_1,
    reg soft_reset_2,
    reg fifo_full,
    reg low_pkt_valid,
    reg fifo_empty_0,
    reg fifo_empty_1,
    reg fifo_empty_2,
    wire busy,
    wire detect_addr,
    wire ld_state,
    wire laf_state,
    wire full_stage,
    wire write_enb_reg,
    wire rst_int_reg,
    wire lfd_state
	 
	parameter cycle = 10;
	
	router_fsm DUT (
	 clk,
    resetn,
    pkt_valid,
    parity_done,
    data_in,
    soft_reset_0,
    soft_reset_1,
    soft_reset_2,
    fifo_full,
    low_pkt_valid,
    fifo_empty_0,
    fifo_empty_1,
    fifo_empty_2,
    busy,
    detect_addr,
    ld_state,
    laf_state,
    full_stage,
    write_enb_reg,
    rst_int_reg,
    lfd_state
	);
	
	
	
	initial 
		begin
		clk = 1;
		forever 
		#5 clk=~clk;
		end
		
	task initialize;
	begin
	pkt_valid = 0;
	fifo_empty_0 = 0;
	fifo_empty_1 = 0;
	fifo_empty_2 = 0;
	fifo_full = 0;
	parity_done = 0;
	low_pkt_valid = 0;
	end
	endtask
	

   task rst;
   begin
   @(negedge clock)
    resetn=1'b0;
   @(negedge clock)
    resetn=1'b1;
   end
   endtask
	
	
	
	task task1;
	@ (negedge clk)
	begin
	pkt_valid <= 1;
	data_in[1:0] <= 0;
	fifo_empty_0 <= 1;
	end
	//LFD
	@ (negedge clk)
	//LD
	@ (negedge clk)
	begin
	fifo_full <= 0;
	pkt_valid <= 0;
	end
	//LP
	@ (negedge clk)
	//CPE
	@ (negedge clk)
	fifo_full <= 0;
	//DA
	end
	endtask
	
	task task2;
	@ (negedge clk)
	begin
	pkt_valid <= 1;
	data_in[1:0] <= 0;
	fifo_empty_0 <= 1;
	end
	//LFD
	@ (negedge clk)
	//LD
	@ (negedge clk)
	fifo_full <= 1;
	//FFS
	@ (negedge clk)
	fifo_full <= 0;
	//LAF
	@ (negedge clk)
	begin
	parity_done <= 0;
	low_pkt_valid <= 1;
	end
	//LP
	@ (negedge clk)
	//CPE
	@ (negedge clk)
	fifo_full <= 0;
	//DA
	end
	endtask
	
	task task3;
	@ (negedge clk)
	begin
	pkt_valid <= 1;
	data_in[1:0] <= 0;
	fifo_empty_0 <= 1;
	end
	//LFD
	@ (negedge clk)
	//LD
	@ (negedge clk)
	fifo_full <= 1;
	//FFS
	@ (negedge clk)
	fifo_full <= 0;
	//LAF
	@ (negedge clk)
	begin
	parity_done <= 0;
	low_pkt_valid <= 0;
	end
	//LD
	@ (negedge clk)
	begin
	fifo_full <= 0;
	pkt_valid <= 0;
	end
	//LP
	@ (negedge clk)
	//CPE
	@ (negedge clk)
	fifo_full <= 0;
	//DA
	end
	endtask
	
	task task3;
	@ (negedge clk)
	begin
	pkt_valid <= 1;
	data_in[1:0] <= 0;
	fifo_empty_0 <= 1;
	end
	//LFD
	@ (negedge clk)
	//LD
	@ (negedge clk)
	begin
	fifo_full <= 0;
	pkt_valid <= 0;
	end
	//LP
	@ (negedge clk)
	//CPE
	@ (negedge clk)
	fifo_full <= 1;
	//FFS
	@ (negedge clk)
	fifo_full <= 0;
	//LAF
	@ (negedge clk)
	parity_done <= 1;
	//DA
	end
	endtask
	
   initial
   begin
   rst;
   initialize;
  
    task1;
	rst;
	#30
    task2;
	rst;
	#30
	task3;
	rst;
	#30
    task4;
	rst;
   #1000
	$finish;
	
   end
	
	initial 
	$monitor("Reset=%b, det_add=%b, write_enb_reg=%b, full_state=%b, lfd_state=%b, busy=%b, ld_state=%b, laf_state=%b, rst_int_reg=%b, low_packet_valid=%b", resetn, detect_addr, write_enb_reg, full_state, lfd_state, busy, ld_state, laf_state, rst_int_reg, low_packet_valid);
	
	endmodule 
	
	
	
	
	